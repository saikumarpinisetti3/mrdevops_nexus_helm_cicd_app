pipeline {
    agent any
    stages {
        stage('checkout') {
            steps {
                echo "checked out"
            }
        }
        stage('sonar quality check') {
            agent {
                docker {
                    image 'maven'
                    args '-u root'
                }
            }
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'token') {
                        // some block
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }
                stage('sonar quality gate status'){
                steps{
                       script{
                        waitForQualityGate abortPipeline: false, credentialsId: 'token'
                       }
                }
            }
                 stage('docker build and push to nexus repo'){
                steps{
                    script{
                        withCredentials([string(credentialsId: 'nexus', variable: 'nexus-creds')]) {
                    sh "docker build -t 13.232.182.185:8083/springapp:1 ."
                    sh "docker login -u admin -p saikumar 13.232.182.185:8083"
                    sh "docker push 13.232.182.185:8083/springapp:1"
                    sh "docker rmi 13.232.182.185:8083/springapp:1"
                    }
                }
            }
        }
		 stage('identifying misconfig using datree and helm'){
            steps{
                script{
                    dir('kubernetes/myapp') {
                        sh "helm datree test ."
                    }
                }
            }
        }
		stage('pushing to the nexus repo '){
            steps{
                script{
                    dir('kubernetes/myapp') {
                        sh "tar -czvf myapp-1.tgz myapp/"
                    sh "curl -u admin:saikumar http://13.232.182.185:8081/repository/helm-hosted/ --upload-file myapp-1.tgz -v"
                }
                }
            }
        }
    }
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "saikumarpinisetti3@gmail.com";  
		}
	}
}
